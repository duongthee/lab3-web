const express = require("express");
const Photo = require("../db/photoModel");
const router = express.Router();
const User = require("../db/userModel");
const multer = require('multer'); // Import multer
const path = require('path'); // Import path for generating unique filenames
const fs = require('fs'); // Import fs to ensure upload directory exists

// Ensure the images directory exists
const uploadDir = path.join(__dirname, '../images');
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir);
}

// Configure multer for file uploads
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, uploadDir); // Save files to the images directory
  },
  filename: function (req, file, cb) {
    // Generate a unique filename
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ storage: storage });

// Authentication middleware
const isAuthenticated = (req, res, next) => {
  if (req.session && req.session.user) {
    return next();
  } else {
    res.status(401).json({ error: 'Unauthorized' });
  }
};

// Apply authentication middleware to protected routes
router.use(isAuthenticated);

router.post("/", async (request, response) => {
  
});

router.get("/", async (request, response) => {
  
});

// Get photos of a specific user with comments
router.get("/photosOfUser/:id", async (req, res) => {
  try {
    // Verify user exists
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(400).json({ error: "User not found" });
    }

    // Get photos for the user
    const photos = await Photo.find({ user_id: req.params.id });

    // Manually populate user details for each comment
    const photosWithUsers = await Promise.all(photos.map(async photo => {
      const commentsWithUsers = await Promise.all(photo.comments.map(async comment => {
        // Fetch user details for each comment's user_id
        const user = await User.findById(comment.user_id).select('_id first_name last_name');
        // Return a new comment object with the user details
        return {
          _id: comment._id,
          comment: comment.comment,
          date_time: comment.date_time,
          user: user // user will be null if not found
        };
      }));
      // Return a new photo object with comments that include user details
      return {
        _id: photo._id,
        user_id: photo.user_id,
        file_name: photo.file_name,
        date_time: photo.date_time,
        comments: commentsWithUsers
      };
    }));

    res.json(photosWithUsers);
  } catch (err) {
    res.status(400).json({ error: "Error fetching photos" });
  }
});

// POST /photos/new - Upload a photo
router.post('/photos/new', upload.single('photo'), async (req, res) => {
  // 'photo' is the name of the file input field in the form
  if (!req.file) {
    return res.status(400).json({ error: 'No file uploaded.' });
  }

  try {
    const newPhoto = new Photo({
      file_name: req.file.filename, // Use the unique filename generated by multer
      date_time: new Date(),
      user_id: req.session.user._id, // Get user ID from session
    });

    await newPhoto.save();

    res.status(201).json({ message: 'Photo uploaded successfully', photo: newPhoto });
  } catch (err) {
    console.error('Error uploading photo:', err);
    // Clean up the uploaded file if saving to DB fails
    fs.unlink(req.file.path, (unlinkErr) => {
      if (unlinkErr) {
        console.error('Error deleting uploaded file:', unlinkErr);
      }
    });
    res.status(500).json({ error: 'Server error uploading photo.' });
  }
});

// DELETE /photos/:photo_id - Delete a photo
router.delete('/photos/:photo_id', async (req, res) => {
  const photoId = req.params.photo_id;
  const loggedInUserId = req.session.user._id;

  try {
    const photo = await Photo.findById(photoId);

    if (!photo) {
      return res.status(404).json({ error: 'Photo not found.' });
    }

    // Check if the logged-in user is the owner of the photo
    if (photo.user_id.toString() !== loggedInUserId) {
      return res.status(401).json({ error: 'Unauthorized to delete this photo.' });
    }

    // Delete the photo document from the database
    await Photo.deleteOne({ _id: photoId });

    // Delete the image file from the images directory
    const filePath = path.join(uploadDir, photo.file_name);
    fs.unlink(filePath, (err) => {
      if (err) {
        console.error('Error deleting photo file:', err);
        // Continue despite file deletion error, as DB entry is removed
      }
    });

    res.status(200).json({ message: 'Photo deleted successfully.' });

  } catch (err) {
    console.error('Error deleting photo:', err);
    res.status(500).json({ error: 'Server error deleting photo.' });
  }
});

module.exports = router;
